"""
TP 1: Dise√±o de Par√°metros del Calentador El√©ctrico
====================================================

Este m√≥dulo implementa el TP1 donde se establecen los par√°metros de dise√±o
del calentador de agua el√©ctrico seg√∫n las especificaciones del curso.
"""

import numpy as np
import matplotlib.pyplot as plt

from utils.heat_simulation import HeatSimulationParameters


def mostrar_parametros_dise√±o():
    """Muestra los par√°metros de dise√±o seleccionados para el calentador."""
    print("=" * 60)
    print("TP 1 - PAR√ÅMETROS DE DISE√ëO DEL CALENTADOR EL√âCTRICO")
    print("=" * 60)
    print()
    
    # Par√°metros de dise√±o seg√∫n las especificaciones
    print("üìã ESPECIFICACIONES DE DISE√ëO:")
    print("-" * 40)
    print("‚Ä¢ Material aislante: Acero + Poliuretano")
    print("  - Acero: k = 16 W/m¬∑K, espesor = 1 mm")
    print("  - Poliuretano: k = 0.03 W/m¬∑K, espesor = 1 mm")
    print()
    print("‚Ä¢ Forma del recipiente: Cil√≠ndrica")
    print(f"  - Radio: 0.05 m (5 cm)")
    print(f"  - Altura: 0.13 m (13 cm)")
    print(f"  - Capacidad: ~1.0 litro")
    print()
    print("‚Ä¢ Prop√≥sito: Calentar agua hasta 100¬∞C")
    print("‚Ä¢ Fluido: Agua (œÅ = 1000 kg/m¬≥, c = 4186 J/kg¬∑¬∞C)")
    print("‚Ä¢ Tiempo objetivo: < 2500 segundos (~42 min)")
    print()
    print("‚Ä¢ Alimentaci√≥n el√©ctrica:")
    print("  - Tensi√≥n: 12V (versi√≥n port√°til)")
    print("  - Resistencia: 0.4 Œ©")
    print("  - Potencia: V¬≤/R = 144/0.4 = 360 W")
    print()
    print("‚Ä¢ Condiciones iniciales:")
    print("  - Temperatura inicial agua: 20¬∞C")
    print("  - Temperatura ambiente: 20¬∞C")
    print()


def calcular_parametros_termicos():
    """Calcula y muestra los par√°metros t√©rmicos derivados."""
    print("üî¨ C√ÅLCULOS T√âRMICOS:")
    print("-" * 40)
    
    # Crear par√°metros con valores de dise√±o
    params = HeatSimulationParameters()
    
    print(f"‚Ä¢ Coeficiente de transmisi√≥n t√©rmica U:")
    print(f"  - Resistencia t√©rmica acero: {0.001/16:.6f} m¬≤K/W")
    print(f"  - Resistencia t√©rmica poliuretano: {0.001/0.03:.6f} m¬≤K/W")
    print(f"  - Resistencia total: {0.001/16 + 0.001/0.03:.6f} m¬≤K/W")
    print(f"  - U = 1/R_total = {params.U:.2f} W/m¬≤K")
    print()
    
    print(f"‚Ä¢ Geometr√≠a del cilindro:")
    print(f"  - √Årea lateral: 2œÄ √ó {params.radio} √ó {params.altura} = {params.area_lateral:.6f} m¬≤")
    print(f"  - √Årea superior: œÄ √ó {params.radio}¬≤ = {params.area_superior:.6f} m¬≤")
    print(f"  - √Årea total: {params.area_total:.6f} m¬≤")
    print()
    
    print(f"‚Ä¢ Capacidad calor√≠fica del sistema:")
    print(f"  - Masa de agua: {params.masa} kg")
    print(f"  - Capacidad: m √ó c = {params.masa} √ó {params.calor_especifico} = {params.masa * params.calor_especifico} J/¬∞C")
    print()


def calcular_aumento_temperatura_1s():
    """Calcula el aumento de temperatura despu√©s de 1 segundo sin p√©rdidas."""
    print("‚è±Ô∏è  C√ÅLCULO PARA t = 1 SEGUNDO (SIN P√âRDIDAS):")
    print("-" * 40)
    
    masa = 1.0  # kg
    c = 4186    # J/kg¬∑¬∞C
    potencia = 360  # W
    
    # Energ√≠a entregada en 1 segundo
    energia_1s = potencia * 1  # J
    
    # Aumento de temperatura
    delta_T = energia_1s / (masa * c)
    
    print(f"‚Ä¢ Potencia del calefactor: {potencia} W")
    print(f"‚Ä¢ Energ√≠a entregada en 1s: {energia_1s} J")
    print(f"‚Ä¢ Capacidad calor√≠fica: {masa} kg √ó {c} J/kg¬∑¬∞C = {masa * c} J/¬∞C")
    print(f"‚Ä¢ Aumento de temperatura: ŒîT = {energia_1s} J √∑ {masa * c} J/¬∞C")
    print(f"‚Ä¢ ŒîT = {delta_T:.6f} ¬∞C")
    print()
    print(f"üìä Resultado: La temperatura aumenta {delta_T:.6f}¬∞C en el primer segundo")
    print()


def calcular_tiempo_sin_perdidas():
    """Calcula el tiempo necesario para alcanzar 100¬∞C sin p√©rdidas."""
    print("üéØ TIEMPO TE√ìRICO SIN P√âRDIDAS (20¬∞C ‚Üí 100¬∞C):")
    print("-" * 40)
    
    masa = 1.0
    c = 4186
    delta_T = 80  # ¬∞C (de 20 a 100)
    potencia = 360
    
    Q_total = masa * c * delta_T
    tiempo_teorico = Q_total / potencia
    
    print(f"‚Ä¢ Energ√≠a total necesaria: Q = m √ó c √ó ŒîT")
    print(f"  Q = {masa} kg √ó {c} J/kg¬∑¬∞C √ó {delta_T}¬∞C = {Q_total:,.0f} J")
    print(f"‚Ä¢ Tiempo te√≥rico: t = Q / P = {Q_total:,.0f} J √∑ {potencia} W")
    print(f"‚Ä¢ t = {tiempo_teorico:.0f} segundos = {tiempo_teorico/60:.1f} minutos")
    print()


def graficar_temperatura_teorica():
    """Grafica la curva de temperatura te√≥rica sin p√©rdidas usando la misma simulaci√≥n que otros TPs."""
    print("üìà GENERANDO GR√ÅFICO TE√ìRICO (SIN P√âRDIDAS)...")
    
    # Usar la misma simulaci√≥n que en TP2/TP3 para consistencia
    from utils.heat_simulation import HeatSimulationParameters, HeatSimulator
    
    # Crear par√°metros normales PERO simular sin p√©rdidas
    params = HeatSimulationParameters(
        masa=1.0,
        potencia=360,
        T_inicial=20,
        T_amb=20,
        tiempo_total=1200,  # 20 minutos
    )
    
    # Simular SIN p√©rdidas t√©rmicas (U = 0)
    params_sin_perdidas = HeatSimulationParameters(
        masa=params.masa,
        potencia=params.potencia,
        T_inicial=params.T_inicial,
        T_amb=params.T_amb,
        tiempo_total=params.tiempo_total,
        k_acero=1e6,  # Conductividad muy alta = sin p√©rdidas
        k_poliuretano=1e6,
        espesor_acero=0.001,
        espesor_poliuretano=0.001
    )
    
    sim = HeatSimulator(params_sin_perdidas)
    tiempos, temperaturas = sim.simular(parar_en_100c=True)
    
    # Crear gr√°fico
    plt.figure(figsize=(10, 6))
    tiempos_min = np.array(tiempos) / 60.0
    plt.plot(tiempos_min, temperaturas, 'b-', linewidth=2, label="Temperatura te√≥rica")
    plt.axhline(100, color='r', linestyle='--', label="100¬∞C (objetivo)")
    plt.axhline(20, color='g', linestyle=':', alpha=0.7, label="20¬∞C (inicial)")
    
    plt.title('TP1: Curva de Temperatura Te√≥rica del Calentador\n(Sin p√©rdidas de calor)')
    plt.xlabel('Tiempo (minutos)')
    plt.ylabel('Temperatura (¬∞C)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Encontrar el tiempo donde se alcanza 100¬∞C
    tiempo_100c = None
    for i, temp in enumerate(temperaturas):
        if temp >= 100:
            tiempo_100c = tiempos_min[i]
            break
    
    if tiempo_100c:
        plt.annotate(f'Tiempo total: {tiempo_100c:.1f} min', 
                    xy=(tiempo_100c, 100), xytext=(tiempo_100c*0.7, 90),
                    arrowprops=dict(arrowstyle='->', color='red', alpha=0.7),
                    fontsize=10, ha='center')
    
    plt.tight_layout()
    plt.show()
    
    if tiempo_100c:
        print(f"‚úÖ Gr√°fico generado - Tiempo para 100¬∞C: {tiempo_100c:.1f} minutos")
    else:
        print(f"‚úÖ Gr√°fico generado - Tiempo final: {tiempos_min[-1]:.1f} minutos")
    
    return tiempos, temperaturas


def ejecutar_tp1():
    """Ejecuta todo el TP1 completo."""
    mostrar_parametros_dise√±o()
    calcular_parametros_termicos()
    calcular_aumento_temperatura_1s()
    calcular_tiempo_sin_perdidas()
    graficar_temperatura_teorica()
    
    print("=" * 60)
    print("‚úÖ TP1 COMPLETADO")
    print("=" * 60)


def ejecutar_tp1_mostrar_parametros():
    """Ejecuta solo la parte de mostrar par√°metros."""
    mostrar_parametros_dise√±o()


def ejecutar_tp1_calculos_termicos():
    """Ejecuta solo los c√°lculos t√©rmicos."""
    calcular_parametros_termicos()


def ejecutar_tp1_aumento_1s():
    """Ejecuta solo el c√°lculo del aumento en 1 segundo."""
    calcular_aumento_temperatura_1s()


def ejecutar_tp1_tiempo_teorico():
    """Ejecuta solo el c√°lculo del tiempo te√≥rico."""
    calcular_tiempo_sin_perdidas()


def ejecutar_tp1_grafico():
    """Ejecuta solo la generaci√≥n del gr√°fico."""
    graficar_temperatura_teorica()


if __name__ == "__main__":
    ejecutar_tp1()
